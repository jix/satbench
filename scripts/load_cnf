#!/usr/bin/env python3
from satbench.script import *
import threading

parser = argparse.ArgumentParser()
parser.add_argument("--collection", nargs="*", action="append", default=[])
args = parser.parse_args()

threads = []

mutex = threading.Lock()


def handle_path(path, collections):
    try:
        command = ["task_cnfpack", str(path), *collections]
        success = False
        for mem in [2, 3, 6, 15, 30]:
            increase_mem = False

            conn = runner.add_tasks(
                [
                    runner.task(
                        name=path.name,
                        command=command,
                        cleanup_command=command,
                        threads=1,
                        priority=mem,
                        memory_mb=mem * 1024,
                    )
                ]
            )

            for response in conn:
                event = response["event"]
                if isinstance(event, dict) and (finished := event.get("Finished")):
                    status = finished["status"]
                    if status == "OutOfMemory":
                        increase_mem = True
                        break
                    elif status == dict(Exited=dict(code=0)):
                        success = True
                        break
                    else:
                        with mutex:
                            print(f"unexpected status {status} for {path}")
                            return

            if not increase_mem:
                break
    except Exception:
        with mutex:
            print(f"failed to pack {path}:")
            traceback.print_exc()
            return
    if not success:
        with mutex:
            print(f"failed to pack {path} without OOM")


runner.ping()

for (input_dir, *collections) in args.collection:
    paths = [
        path
        for path in Path(input_dir).rglob("*")
        if re.match(r".*\.cnf(\.[a-z0-9]+)?$", path.name)
    ]

    for path in paths:

        def make_target(path, collections):
            return lambda: handle_path(path, collections)

        thread = threading.Thread(target=make_target(path, collections))

        threads.append((thread, os.stat(path).st_size))

threads.sort(key=lambda pair: pair[1], reverse=True)

for (thread, size) in threads:
    thread.start()

for (thread, size) in threads:
    thread.join()
